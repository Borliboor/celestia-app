// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payment/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WirePayForMessage describes the format of data that is sent over the wire for
// each PayForMessage
type WirePayForMessage struct {
	MessageGasPrice        uint64                    `protobuf:"varint,1,opt,name=message_gas_price,json=messageGasPrice,proto3" json:"message_gas_price,omitempty"`
	MessageNameSpaceId     []byte                    `protobuf:"bytes,2,opt,name=message_name_space_id,json=messageNameSpaceId,proto3" json:"message_name_space_id,omitempty"`
	MessageSize            uint64                    `protobuf:"varint,3,opt,name=message_size,json=messageSize,proto3" json:"message_size,omitempty"`
	Message                []byte                    `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	MessageShareCommitment []ShareCommitAndSignature `protobuf:"bytes,6,rep,name=message_share_commitment,json=messageShareCommitment,proto3" json:"message_share_commitment"`
	Signer                 string                    `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *WirePayForMessage) Reset()         { *m = WirePayForMessage{} }
func (m *WirePayForMessage) String() string { return proto.CompactTextString(m) }
func (*WirePayForMessage) ProtoMessage()    {}
func (*WirePayForMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9897659aff976806, []int{0}
}
func (m *WirePayForMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WirePayForMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WirePayForMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WirePayForMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WirePayForMessage.Merge(m, src)
}
func (m *WirePayForMessage) XXX_Size() int {
	return m.Size()
}
func (m *WirePayForMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_WirePayForMessage.DiscardUnknown(m)
}

var xxx_messageInfo_WirePayForMessage proto.InternalMessageInfo

func (m *WirePayForMessage) GetMessageGasPrice() uint64 {
	if m != nil {
		return m.MessageGasPrice
	}
	return 0
}

func (m *WirePayForMessage) GetMessageNameSpaceId() []byte {
	if m != nil {
		return m.MessageNameSpaceId
	}
	return nil
}

func (m *WirePayForMessage) GetMessageSize() uint64 {
	if m != nil {
		return m.MessageSize
	}
	return 0
}

func (m *WirePayForMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *WirePayForMessage) GetMessageShareCommitment() []ShareCommitAndSignature {
	if m != nil {
		return m.MessageShareCommitment
	}
	return nil
}

func (m *WirePayForMessage) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// PayForMessageResponse describes the response returned after the submission of a WirePayForMessage
type PayForMessageResponse struct {
}

func (m *PayForMessageResponse) Reset()         { *m = PayForMessageResponse{} }
func (m *PayForMessageResponse) String() string { return proto.CompactTextString(m) }
func (*PayForMessageResponse) ProtoMessage()    {}
func (*PayForMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9897659aff976806, []int{1}
}
func (m *PayForMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayForMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayForMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayForMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayForMessageResponse.Merge(m, src)
}
func (m *PayForMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *PayForMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PayForMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PayForMessageResponse proto.InternalMessageInfo

// ShareCommitAndSignature defines the
type ShareCommitAndSignature struct {
	K               uint64 `protobuf:"varint,1,opt,name=k,proto3" json:"k,omitempty"`
	ShareCommitment []byte `protobuf:"bytes,2,opt,name=share_commitment,json=shareCommitment,proto3" json:"share_commitment,omitempty"`
	Signature       []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ShareCommitAndSignature) Reset()         { *m = ShareCommitAndSignature{} }
func (m *ShareCommitAndSignature) String() string { return proto.CompactTextString(m) }
func (*ShareCommitAndSignature) ProtoMessage()    {}
func (*ShareCommitAndSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9897659aff976806, []int{2}
}
func (m *ShareCommitAndSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareCommitAndSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareCommitAndSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareCommitAndSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareCommitAndSignature.Merge(m, src)
}
func (m *ShareCommitAndSignature) XXX_Size() int {
	return m.Size()
}
func (m *ShareCommitAndSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareCommitAndSignature.DiscardUnknown(m)
}

var xxx_messageInfo_ShareCommitAndSignature proto.InternalMessageInfo

func (m *ShareCommitAndSignature) GetK() uint64 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *ShareCommitAndSignature) GetShareCommitment() []byte {
	if m != nil {
		return m.ShareCommitment
	}
	return nil
}

func (m *ShareCommitAndSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// SignedTransactionsDataPayForMessage is what gets signed by users when
// creating ShareCommitSignatures. Multiple versions are signed and included.
type SignedPayForMessage struct {
	MessageGasPrice        uint64 `protobuf:"varint,1,opt,name=message_gas_price,json=messageGasPrice,proto3" json:"message_gas_price,omitempty"`
	MessageNamespaceId     []byte `protobuf:"bytes,3,opt,name=message_namespace_id,json=messageNamespaceId,proto3" json:"message_namespace_id,omitempty"`
	MessageSize            uint64 `protobuf:"varint,4,opt,name=message_size,json=messageSize,proto3" json:"message_size,omitempty"`
	MessageShareCommitment []byte `protobuf:"bytes,5,opt,name=message_share_commitment,json=messageShareCommitment,proto3" json:"message_share_commitment,omitempty"`
}

func (m *SignedPayForMessage) Reset()         { *m = SignedPayForMessage{} }
func (m *SignedPayForMessage) String() string { return proto.CompactTextString(m) }
func (*SignedPayForMessage) ProtoMessage()    {}
func (*SignedPayForMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9897659aff976806, []int{3}
}
func (m *SignedPayForMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayForMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayForMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayForMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayForMessage.Merge(m, src)
}
func (m *SignedPayForMessage) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayForMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayForMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayForMessage proto.InternalMessageInfo

func (m *SignedPayForMessage) GetMessageGasPrice() uint64 {
	if m != nil {
		return m.MessageGasPrice
	}
	return 0
}

func (m *SignedPayForMessage) GetMessageNamespaceId() []byte {
	if m != nil {
		return m.MessageNamespaceId
	}
	return nil
}

func (m *SignedPayForMessage) GetMessageSize() uint64 {
	if m != nil {
		return m.MessageSize
	}
	return 0
}

func (m *SignedPayForMessage) GetMessageShareCommitment() []byte {
	if m != nil {
		return m.MessageShareCommitment
	}
	return nil
}

// SignedPayForMessageResponse describes the response returned after the submission of a SignedPayForMessage
type SignedPayForMessageResponse struct {
}

func (m *SignedPayForMessageResponse) Reset()         { *m = SignedPayForMessageResponse{} }
func (m *SignedPayForMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SignedPayForMessageResponse) ProtoMessage()    {}
func (*SignedPayForMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9897659aff976806, []int{4}
}
func (m *SignedPayForMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayForMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayForMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayForMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayForMessageResponse.Merge(m, src)
}
func (m *SignedPayForMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayForMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayForMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayForMessageResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WirePayForMessage)(nil), "payment.WirePayForMessage")
	proto.RegisterType((*PayForMessageResponse)(nil), "payment.PayForMessageResponse")
	proto.RegisterType((*ShareCommitAndSignature)(nil), "payment.ShareCommitAndSignature")
	proto.RegisterType((*SignedPayForMessage)(nil), "payment.SignedPayForMessage")
	proto.RegisterType((*SignedPayForMessageResponse)(nil), "payment.SignedPayForMessageResponse")
}

func init() { proto.RegisterFile("payment/tx.proto", fileDescriptor_9897659aff976806) }

var fileDescriptor_9897659aff976806 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x26, 0x21, 0x51, 0xa7, 0x41, 0x6d, 0x97, 0xfe, 0x58, 0xa1, 0xb8, 0xa9, 0x2f, 0x04,
	0x24, 0x62, 0x68, 0x2f, 0x5c, 0x29, 0x12, 0x88, 0x43, 0x50, 0xe5, 0x1c, 0x90, 0xb8, 0x98, 0xad,
	0x33, 0x6c, 0x57, 0xad, 0xbd, 0x2b, 0xef, 0x56, 0x6a, 0xca, 0x8d, 0x27, 0x40, 0xe2, 0x29, 0x78,
	0x93, 0x1e, 0x23, 0x71, 0xe1, 0x84, 0x50, 0xc2, 0x83, 0x20, 0x3b, 0x6b, 0x97, 0x92, 0x86, 0x43,
	0x6f, 0x33, 0xf3, 0xcd, 0x7c, 0x33, 0xfe, 0x3e, 0x2f, 0xac, 0x2a, 0x36, 0x8a, 0x31, 0x31, 0xbe,
	0x39, 0xef, 0xa9, 0x54, 0x1a, 0x49, 0x9b, 0xb6, 0xd2, 0x5e, 0xe7, 0x92, 0xcb, 0xbc, 0xe6, 0x67,
	0xd1, 0x0c, 0x6e, 0x6f, 0x73, 0x29, 0xf9, 0x29, 0xfa, 0x4c, 0x09, 0x9f, 0x25, 0x89, 0x34, 0xcc,
	0x08, 0x99, 0xe8, 0x19, 0xea, 0x7d, 0xab, 0xc2, 0xda, 0x3b, 0x91, 0xe2, 0x21, 0x1b, 0xbd, 0x92,
	0x69, 0x1f, 0xb5, 0x66, 0x1c, 0xe9, 0x63, 0x58, 0x8b, 0x67, 0x61, 0xc8, 0x99, 0x0e, 0x55, 0x2a,
	0x22, 0x74, 0x48, 0x87, 0x74, 0xeb, 0xc1, 0x8a, 0x05, 0x5e, 0x33, 0x7d, 0x98, 0x95, 0xe9, 0x33,
	0xd8, 0x28, 0x7a, 0x13, 0x16, 0x63, 0xa8, 0x15, 0x8b, 0x30, 0x14, 0x43, 0xa7, 0xda, 0x21, 0xdd,
	0x56, 0x40, 0x2d, 0xf8, 0x96, 0xc5, 0x38, 0xc8, 0xa0, 0x37, 0x43, 0xba, 0x0b, 0xad, 0x62, 0x44,
	0x8b, 0x0b, 0x74, 0x6a, 0x39, 0xf3, 0xb2, 0xad, 0x0d, 0xc4, 0x05, 0x52, 0x07, 0x9a, 0x36, 0x75,
	0xea, 0x39, 0x4f, 0x91, 0xd2, 0x0f, 0xe0, 0x94, 0xc3, 0xc7, 0x2c, 0xc5, 0x30, 0x92, 0x71, 0x2c,
	0x4c, 0xa6, 0x80, 0xd3, 0xe8, 0xd4, 0xba, 0xcb, 0x7b, 0x9d, 0x9e, 0x55, 0xa4, 0x37, 0xc8, 0x1a,
	0x5e, 0xe6, 0xf8, 0x8b, 0x64, 0x38, 0x10, 0x3c, 0x61, 0xe6, 0x2c, 0xc5, 0x83, 0xfa, 0xe5, 0xcf,
	0x9d, 0x4a, 0xb0, 0x59, 0x2c, 0xbc, 0xea, 0xca, 0xa6, 0xe8, 0x26, 0x34, 0xb4, 0xe0, 0x09, 0xa6,
	0x4e, 0xb3, 0x43, 0xba, 0x4b, 0x81, 0xcd, 0xbc, 0x2d, 0xd8, 0xb8, 0x26, 0x53, 0x80, 0x5a, 0xc9,
	0x44, 0xa3, 0xa7, 0x60, 0x6b, 0xc1, 0x26, 0xda, 0x02, 0x72, 0x62, 0x95, 0x23, 0x27, 0xf4, 0x11,
	0xac, 0xce, 0xdd, 0x3c, 0x93, 0x69, 0x45, 0xff, 0x73, 0xc4, 0x36, 0x2c, 0xe9, 0x82, 0x25, 0x17,
	0xa8, 0x15, 0x5c, 0x15, 0xbc, 0x31, 0x81, 0x7b, 0xd9, 0x12, 0x1c, 0xde, 0xde, 0xb8, 0xa7, 0xb0,
	0xfe, 0xb7, 0x71, 0xa5, 0x6f, 0xb5, 0x39, 0xdf, 0xf4, 0x02, 0xdf, 0xea, 0xf3, 0xbe, 0x3d, 0xff,
	0x8f, 0x3b, 0x77, 0x72, 0xe2, 0x05, 0xaa, 0x7b, 0x0f, 0xe0, 0xfe, 0x0d, 0x5f, 0x54, 0x68, 0xbc,
	0xf7, 0x09, 0x6a, 0x7d, 0xcd, 0xa9, 0x81, 0xbb, 0xd7, 0xbf, 0xb8, 0x5d, 0x9a, 0x3d, 0xf7, 0x1b,
	0xb7, 0xdd, 0x12, 0xbb, 0xd9, 0xb7, 0x87, 0x9f, 0xbf, 0xff, 0xfe, 0x5a, 0xdd, 0xa5, 0x3b, 0x7e,
	0x84, 0xa7, 0xa8, 0x8d, 0x60, 0x7e, 0xf1, 0xba, 0x14, 0x1b, 0x7d, 0x94, 0xa9, 0x3d, 0xf5, 0xa0,
	0x7f, 0x39, 0x71, 0xc9, 0x78, 0xe2, 0x92, 0x5f, 0x13, 0x97, 0x7c, 0x99, 0xba, 0x95, 0xf1, 0xd4,
	0xad, 0xfc, 0x98, 0xba, 0x95, 0xf7, 0xfb, 0x5c, 0x98, 0xe3, 0xb3, 0xa3, 0x5e, 0x24, 0xe3, 0x92,
	0x44, 0xa6, 0xbc, 0x8c, 0x9f, 0x30, 0xa5, 0xfc, 0xf3, 0x92, 0xd6, 0x8c, 0x14, 0xea, 0xa3, 0x46,
	0xfe, 0xf6, 0xf6, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xd6, 0x32, 0x1f, 0xcc, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// PayForMessage allows the user to post data to made be available.
	PayForMessage(ctx context.Context, in *WirePayForMessage, opts ...grpc.CallOption) (*PayForMessageResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PayForMessage(ctx context.Context, in *WirePayForMessage, opts ...grpc.CallOption) (*PayForMessageResponse, error) {
	out := new(PayForMessageResponse)
	err := c.cc.Invoke(ctx, "/payment.Msg/PayForMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// PayForMessage allows the user to post data to made be available.
	PayForMessage(context.Context, *WirePayForMessage) (*PayForMessageResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PayForMessage(ctx context.Context, req *WirePayForMessage) (*PayForMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayForMessage not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PayForMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WirePayForMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayForMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Msg/PayForMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayForMessage(ctx, req.(*WirePayForMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayForMessage",
			Handler:    _Msg_PayForMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/tx.proto",
}

func (m *WirePayForMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WirePayForMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WirePayForMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MessageShareCommitment) > 0 {
		for iNdEx := len(m.MessageShareCommitment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MessageShareCommitment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MessageNameSpaceId) > 0 {
		i -= len(m.MessageNameSpaceId)
		copy(dAtA[i:], m.MessageNameSpaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageNameSpaceId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MessageGasPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageGasPrice))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PayForMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayForMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayForMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ShareCommitAndSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareCommitAndSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareCommitAndSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShareCommitment) > 0 {
		i -= len(m.ShareCommitment)
		copy(dAtA[i:], m.ShareCommitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShareCommitment)))
		i--
		dAtA[i] = 0x12
	}
	if m.K != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.K))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayForMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayForMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayForMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageShareCommitment) > 0 {
		i -= len(m.MessageShareCommitment)
		copy(dAtA[i:], m.MessageShareCommitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageShareCommitment)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MessageSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MessageNamespaceId) > 0 {
		i -= len(m.MessageNamespaceId)
		copy(dAtA[i:], m.MessageNamespaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageNamespaceId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MessageGasPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageGasPrice))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayForMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayForMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayForMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WirePayForMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageGasPrice != 0 {
		n += 1 + sovTx(uint64(m.MessageGasPrice))
	}
	l = len(m.MessageNameSpaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MessageSize != 0 {
		n += 1 + sovTx(uint64(m.MessageSize))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MessageShareCommitment) > 0 {
		for _, e := range m.MessageShareCommitment {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *PayForMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShareCommitAndSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K != 0 {
		n += 1 + sovTx(uint64(m.K))
	}
	l = len(m.ShareCommitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *SignedPayForMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageGasPrice != 0 {
		n += 1 + sovTx(uint64(m.MessageGasPrice))
	}
	l = len(m.MessageNamespaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MessageSize != 0 {
		n += 1 + sovTx(uint64(m.MessageSize))
	}
	l = len(m.MessageShareCommitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *SignedPayForMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WirePayForMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WirePayForMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WirePayForMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageGasPrice", wireType)
			}
			m.MessageGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNameSpaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageNameSpaceId = append(m.MessageNameSpaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageNameSpaceId == nil {
				m.MessageNameSpaceId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSize", wireType)
			}
			m.MessageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageShareCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageShareCommitment = append(m.MessageShareCommitment, ShareCommitAndSignature{})
			if err := m.MessageShareCommitment[len(m.MessageShareCommitment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayForMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayForMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayForMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareCommitAndSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareCommitAndSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareCommitAndSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			m.K = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.K |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareCommitment = append(m.ShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.ShareCommitment == nil {
				m.ShareCommitment = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayForMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayForMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayForMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageGasPrice", wireType)
			}
			m.MessageGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNamespaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageNamespaceId = append(m.MessageNamespaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageNamespaceId == nil {
				m.MessageNamespaceId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSize", wireType)
			}
			m.MessageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageShareCommitment = append(m.MessageShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageShareCommitment == nil {
				m.MessageShareCommitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayForMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayForMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayForMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
