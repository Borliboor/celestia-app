syntax = "proto3";
package payment;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/payment/types";


// Msg defines the payment Msg service.
service Msg {
    // PayForMessage allows the user to post data to made be available.
    rpc WirePayForMessage(WirePayForMessage) returns (WirePayForMessageResponse) {
        option (google.api.http).get = "/celestia/payment/payformessage";
    }
    // PayForMessage allows the user to post data to made be available.
    rpc PayForMessage(PayForMessage) returns (PayForMessageResponse) {
      option (google.api.http).get = "/celestia/payment/payformessage";
  }
  }

// WirePayForMessage describes the format of data that is sent over the wire for
// each PayForMessage
message WirePayForMessage {
  string signer = 1;
  bytes message_name_space_id = 2; // assume this is 8 bytes!
  uint64 message_size = 3;
  bytes message = 4;
  repeated ShareCommitAndSignature message_share_commitment = 6 [(gogoproto.nullable) = false];
}

// WirePayForMessageResponse describes the response returned after the submission of a WirePayForMessage
message WirePayForMessageResponse {}

// ShareCommitAndSignature defines the 
message ShareCommitAndSignature {
  uint64 k = 1;
  bytes share_commitment = 2;
  bytes signature = 3; // signature on one SignedTransactionPayForMessage
}

// PayForMessage is what gets signed by users when creating ShareCommitSignatures.
//  Multiple versions are signed and included, each version creates a commitment for a 
// specific square size.
message PayForMessage {
    string signer = 1;
    bytes message_namespace_id = 3;
    uint64 message_size = 4;
    bytes message_share_commitment = 5;
}

// PayForMessageResponse describes the response returned after the submission of a PayForMessage
message PayForMessageResponse {}

